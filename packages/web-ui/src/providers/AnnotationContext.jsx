import React, { createContext, useMemo } from "react";
import useAnnotation from "../hooks/useAnnotation";

const AnnotationContext = createContext({
  stageRef: undefined,
  transformerRef: undefined,
  rectangles: undefined,
  setRectangles: undefined,
  circles: undefined,
  setCircles: undefined,
  arrows: undefined,
  setArrows: undefined,
  scribbles: undefined,
  setScribbles: undefined,
  action: undefined,
  setAction: undefined,
  fillColor: undefined,
  setFillColor: undefined,
  onClick: undefined,
  onPointerDown: undefined,
  onPointerMove: undefined,
  onPointerUp: undefined,
  handleExport: undefined,
  undo: undefined,
  redo: undefined,
  clearAll: undefined,
  clearCurrentPage: undefined,
  scaleFactorRef: undefined,
  chatRef: undefined,
  annotationReceiver: undefined,
  videoElement: undefined,
  konvaImageRef: undefined,
  fileShareRef: undefined,
  annotationStream: undefined,
  setScreenShareStream: undefined,
  whiteboardOwner: undefined,
  setWhiteboardOwner: undefined,
  currentPage: undefined,
  setCurrentPage: undefined,
});

function AnnotationProvider({ children }) {
  const {
    stageRef,
    transformerRef,
    rectangles,
    setRectangles,
    circles,
    setCircles,
    arrows,
    setArrows,
    scribbles,
    setScribbles,
    action,
    setAction,
    fillColor,
    setFillColor,
    onClick,
    onPointerDown,
    onPointerMove,
    onPointerUp,
    handleExport,
    undo,
    redo,
    clearAll,
    clearCurrentPage,
    scaleFactorRef,
    chatRef,
    annotationReceiver,
    videoElement,
    konvaImageRef,
    fileShareRef,
    annotationStream,
    setScreenShareStream,
    pageAnnotations,
    whiteboardOwner,
    setWhiteboardOwner,
    currentPage,
    setCurrentPage,
  } = useAnnotation();

  const value = useMemo(
    () => ({
      stageRef,
      transformerRef,
      rectangles,
      setRectangles,
      circles,
      setCircles,
      arrows,
      setArrows,
      scribbles,
      setScribbles,
      action,
      setAction,
      fillColor,
      setFillColor,
      onClick,
      onPointerDown,
      onPointerMove,
      onPointerUp,
      handleExport,
      undo,
      redo,
      clearAll,
      clearCurrentPage,
      scaleFactorRef,
      chatRef,
      annotationReceiver,
      videoElement,
      konvaImageRef,
      fileShareRef,
      annotationStream,
      setScreenShareStream,
      pageAnnotations,
      whiteboardOwner,
      setWhiteboardOwner,
      currentPage,
      setCurrentPage,
    }),
    [
      stageRef,
      transformerRef,
      rectangles,
      circles,
      arrows,
      scribbles,
      action,
      setAction,
      fillColor,
      setFillColor,
      onClick,
      onPointerDown,
      onPointerMove,
      onPointerUp,
      handleExport,
      undo,
      redo,
      clearAll,
      clearCurrentPage,
      scaleFactorRef,
      chatRef,
      annotationReceiver,
      videoElement,
      konvaImageRef,
      fileShareRef,
      annotationStream,
      setScreenShareStream,
      pageAnnotations,
      whiteboardOwner,
      setWhiteboardOwner,
      currentPage,
      setCurrentPage,
    ]
  );

  return (
    <AnnotationContext.Provider value={value}>
      {children}
    </AnnotationContext.Provider>
  );
}

export default AnnotationProvider;
export { AnnotationContext };
